#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

#define IR1 2
#define IR2 3
#define IR3 4
#define ENTRY_IR 5
#define EXIT_IR 6
#define GREEN_LED 7
#define RED_LED 8
#define ENTRY_SERVO 9
#define EXIT_SERVO 10
#define BUZZER 11
#define MQ2_SENSOR A0

LiquidCrystal_I2C lcd(0x27, 16, 2);
Servo entryServo, exitServo;

int slotStatus[3] = {1, 1, 1};  // 1 = Available, 0 = Occupied
int availableSlots = 3;
bool fireAlertActive = false;  // Track fire alert state

void setup() {
    Serial.begin(115200);
    lcd.begin(16, 2);
    lcd.backlight();

    pinMode(IR1, INPUT);
    pinMode(IR2, INPUT);
    pinMode(IR3, INPUT);
    pinMode(ENTRY_IR, INPUT);
    pinMode(EXIT_IR, INPUT);
    pinMode(GREEN_LED, OUTPUT);
    pinMode(RED_LED, OUTPUT);
    pinMode(BUZZER, OUTPUT);

    entryServo.attach(ENTRY_SERVO);
    exitServo.attach(EXIT_SERVO);
    entryServo.write(0);  // Default closed position
    exitServo.write(0);

    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(RED_LED, LOW);

    // Show startup message
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Intelligent");
    lcd.setCursor(0, 1);
    lcd.print("Parking System");
    delay(3000);
}

void loop() {
    // Read IR sensors
    slotStatus[0] = digitalRead(IR1);
    slotStatus[1] = digitalRead(IR2);
    slotStatus[2] = digitalRead(IR3);

    // Calculate available slots
    availableSlots = slotStatus[0] + slotStatus[1] + slotStatus[2];

    // Control LEDs
    digitalWrite(GREEN_LED, availableSlots > 0);
    digitalWrite(RED_LED, availableSlots == 0);

    // Display available slots
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Free Slots: ");
    lcd.print(availableSlots);
    lcd.setCursor(0, 1);
    lcd.print("Welcome!");

    // Entry gate logic
    if (digitalRead(ENTRY_IR) == LOW && availableSlots > 0) {
        assignParkingSlot();
        openEntryGate();
    } else if (availableSlots == 0) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Parking Full");
    }

    // Exit gate logic
    if (digitalRead(EXIT_IR) == LOW) {
        openExitGate();
    }

    // Gas Sensor Handling
    int gasLevel = getSmoothedGasLevel();
    handleGasDetection(gasLevel);

    // Send data to NodeMCU via Serial
    Serial.print(availableSlots);
    Serial.print(",");
    Serial.println(gasLevel);

    delay(500);
}

// Assign the nearest available parking slot
void assignParkingSlot() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Park at Slot: ");
    
    if (slotStatus[0] == 1) {
        lcd.print("1");
    } else if (slotStatus[1] == 1) {
        lcd.print("2");
    } else if (slotStatus[2] == 1) {
        lcd.print("3");
    }

    delay(2000);
}

// Open and close Entry Gate
void openEntryGate() {
    entryServo.write(90);  // Open gate
    Serial.println("Entry Gate Opened");

    // Wait until vehicle has passed
    while (digitalRead(ENTRY_IR) == LOW);

    delay(1500);  // Close 1.5 sec after vehicle passes
    entryServo.write(0);
    Serial.println("Entry Gate Closed");
}

// Open and close Exit Gate
void openExitGate() {
    exitServo.write(90);  // Open gate
    Serial.println("Exit Gate Opened");

    // Wait until vehicle has passed
    while (digitalRead(EXIT_IR) == LOW);

    delay(1500);  // Close 1.5 sec after vehicle passes
    exitServo.write(0);
    Serial.println("Exit Gate Closed");
}

// Get Smoothed Gas Level (Avoid False Alerts)
int getSmoothedGasLevel() {
    int total = 0;
    for (int i = 0; i < 5; i++) {  // Read 5 times and average
        total += analogRead(MQ2_SENSOR);
        delay(10);
    }
    return total / 5;
}

// Handle gas detection and buzzer alerts
void handleGasDetection(int gasLevel) {
    if (gasLevel > 500 && gasLevel <= 700) {  // Medium risk
        beepBuzzer(5, 1500);
        lcd.setCursor(0, 1);
        lcd.print("Smoke Detected!");
    } else if (gasLevel > 700) {  // High risk (Fire Alert)
        if (!fireAlertActive) {  // Trigger only if not already active
            fireAlertActive = true;
            digitalWrite(BUZZER, HIGH);
            entryServo.write(90);  // Keep gates open
            exitServo.write(90);
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("FIRE ALERT!");
        }
    } else {  // If gas level normal, reset everything
        if (fireAlertActive) {
            fireAlertActive = false;
            digitalWrite(BUZZER, LOW);
            entryServo.write(0);  // Close gates
            exitServo.write(0);
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("System Normal");
        }
    }
}

// Beep buzzer multiple times
void beepBuzzer(int times, int interval) {
    for (int i = 0; i < times; i++) {
        digitalWrite(BUZZER, HIGH);
        delay(500);
        digitalWrite(BUZZER, LOW);
        delay(interval);
    }
}
